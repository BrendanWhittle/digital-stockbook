north <- sapply(coordinates(lnd)[,2], function(x) x>lng)
lnd@data$quadrant [east & north] <- "northeast"
plot(lnd)
plot(lnd, col="lightgrey")
plot(lnd[quadrant,], col="turquoise", add=TRUE)
plot(lnd[,quadrant], col="turquoise", add=TRUE)
sel <-  lnd$quadrant=="northeast"
plot(lnd[sel,], col="turquoise", add=TRUE)
head(sel)
sel <-  [lnd$quadrant=="northeast"]
lnd$quadrant <- "unknown" # prevent NAs in result
lnd$quadrant[east & north] <- "northeast"
plot(lnd, col="lightgrey")
sel <-  lnd$quadrant=="northeast"
plot(lnd[sel,], col="turquoise", add=TRUE)
lnd$quadrant[!east & north] <- "northwest"
lnd$quadrant[east & !north] <- "southeast"
lnd$quadrant[!east & !north] <- "southwest"
plot(lnd)
plot(lnd[east & north,], add = TRUE, col = "red" )
llgridlines(lnd, lty= 3, side ="EN", offset = -0.5)
lnd_disolved = rgeos::gUnaryUnion(spgeom = lnd, id = lnd$quadrant)
library(tmap)
qtm(lnd, fill = "quadrant") +
tm_shape(lnd_disolved) +
tm_borders(lwd = 9)
east <- sapply(coordinates(lnd)[,1], function(x) x>lat)
north <- sapply(coordinates(lnd)[,2], function(x) x>lng)
south <- sapply(coordinates(lnd)[,2], function(x) x<lng)
west <- sapply(coordinates(lnd)[,1], function(x) x<lat)
lnd$quadrant <- "unknown" # prevent NAs in result
lnd@data$quadrant [east & north] <- "northeast"
lnd@data$quadrant [west & north] <- "northwest"
lnd@data$quadrant [east & south] <- "southeast"
lnd@data$quadrant [west & north] <- "southwest"
plot(lnd, col="lightgrey")
sel <-  lnd$quadrant=="northeast"
plot(lnd[sel,], col="turquoise", add=TRUE)
sel <-  lnd$quadrant=="northwest"
plot(lnd[sel,], col="yellow", add=TRUE)
sel <-  lnd$quadrant=="southeast"
plot(lnd[sel,], col="red", add=TRUE)
sel <-  lnd$quadrant=="southwest"
plot(lnd[sel,], col="purple", add=TRUE)
east <- sapply(coordinates(lnd)[,1], function(x) x>lat)
north <- sapply(coordinates(lnd)[,2], function(x) x>lng)
south <- sapply(coordinates(lnd)[,2], function(x) x<lng)
west <- sapply(coordinates(lnd)[,1], function(x) x<lat)
lnd$quadrant <- "unknown" # prevent NAs in result
lnd$quadrant[east & north] <- "northeast"
lnd@data$quadrant [east & north] <- "northeast"
lnd@data$quadrant [west & north] <- "northwest"
lnd@data$quadrant [east & south] <- "southeast"
lnd@data$quadrant [west & south] <- "southwest"
plot(lnd, col="lightgrey")
sel <-  lnd$quadrant=="northeast"
plot(lnd[sel,], col="turquoise", add=TRUE)
sel <-  lnd$quadrant=="northwest"
plot(lnd[sel,], col="yellow", add=TRUE)
sel <-  lnd$quadrant=="southeast"
plot(lnd[sel,], col="red", add=TRUE)
sel <-  lnd$quadrant=="southwest"
plot(lnd[sel,], col="purple", add=TRUE)
vec <- vector(mode="numeric", length= 3)
df <-  data.frame(x=1:3, y=c(1/2, 2/3, 3/4))
class(vec)
class(df)
sp1= SpatialPoints(coords = df)
sp1
class(sp1)
spdf <-  SpatialPixelsDataFrame(sp1, data=df)
spdf <-  SpatialPointsDataFrame(sp1, data=df)
class(spdf)
proj4string(lnd) <-  NA_character_
proj4string(lnd) <-  CRS("+init=epsg:27700")
EPSG <- make_EPSG()
EPSG[grepl("WGS 84$", EPSG$note),]
lnd84 <- spTransform(lnd, CRS("init=epsg:4326"))
lnd84 <- spTransform(lnd, CRS("+init=epsg:4326"))
saveRDS(object = lnd84, file="data/lnd84.Rds")
rm(lnd84)
lnd=readOGR(dsn="data", "london-sport")
library(rgdal)
lnd=readOGR(dsn="data", "london-sport")
lnd=readOGR(dsn="data", "london_sport")
plot(lnd)
nrow(lnd)
crime_data=read.csv("data/mps-recordedcrime-borough.csv", stringsAsFactors = FALSE)
head(crime_data)
head(crime_data$CrimeType)
crime_theft <- crime_data[crime_data$CrimeType == "Theft & Handling",]
head(crime_theft, 2)
crime_ag <- aggregate(CrimeCount ~ Borough, fun=sum, data=crime_theft)
crime_ag <- aggregate(CrimeCount ~ Borough, FUN=sum, data=crime_theft)
head(crime_ag, 2)
crime_ag
lnd$name %in% crime_ag$Borough
lnd$name[!lnd$name %in% crime_ag$Borough]
crime_ag$Borough[!crime_ag$Borough %in% lnd$name]
crime_ag
head(lnd$name)
head(crime_ag$Borough)
lnd@data <- left_join(lnd@data, crime_ag, by=c('name' = 'Borough'))
library(dplyr)
lnd@data <- left_join(lnd@data, crime_ag, by=c('name' = 'Borough'))
lnd@data
library(tmap)
qtm(lnd, "CrimeCount")
lnd_wgs = spTransform(lnd, CRS("+init=epsg:4326"))
osm_tiles = read_osm(bbox(lnd_wgs))
lnd_wgs$Thefts <- lnd$CrimeCount / 10000
tm_shape(osm_tiles) +
tm_raster() +
tm_shape(lnd_wgs) +
tm_fill("Thefts", fill.title = "Thefts\n(10000)", scale = 0.8, alpha = 0.5) +
tm_layout(legend.position = c(0.89,0.02))
osm_tiles = read_osm(bbox(data/lnd_wgs))
library(tmap)
osm_tiles = read_osm(bbox(lnd_wgs))
library("tmaptools", lib.loc="~/R/win-library/3.4")
osm_tiles = read_osm(bbox(lnd_wgs))
install.packages("OpenStreetMap")
osm_tiles = read_osm(bbox(lnd_wgs))
lnd_wgs$Thefts <- lnd$CrimeCount / 10000
tm_shape(osm_tiles) +
tm_raster() +
tm_shape(lnd_wgs) +
tm_fill("Thefts", fill.title = "Thefts\n(10000)", scale = 0.8, alpha = 0.5) +
tm_layout(legend.position = c(0.89,0.02))
library("OpenStreetMap", lib.loc="~/R/win-library/3.4")
library("tmaptools", lib.loc="~/R/win-library/3.4")
library("tmap", lib.loc="~/R/win-library/3.4")
osm_tiles = read_osm(bbox(lnd_wgs))
detach("package:tmaptools", unload=TRUE)
detach("package:OpenStreetMap", unload=TRUE)
detach("package:tmap", unload=TRUE)
library("tmap", lib.loc="~/R/win-library/3.4")
library("tmaptools", lib.loc="~/R/win-library/3.4")
library("OpenStreetMap", lib.loc="~/R/win-library/3.4")
library(rgdal)
stations <-  readOGR(dsn="data", layer="lnd-stns")
proj4string(stations)
proj4string(lnd)
bbox(stations)
bbox(lnd)
stations <- spTransform(stations, CRSobj = CRS(proj4string(lnd)))
plot(lnd)
points(stations)
stations <- stations[lnd,]
plot(stations)
plot(lnd)
plot(stations)
plot(lnd)
points(stations)
lnd_wgs = spTransform(lnd, CRS("+init=epsg:4326"))
osm_tiles = read_osm(bbox(lnd_wgs)) ######################Not working
lnd_wgs$Thefts <- lnd$CrimeCount / 10000
tm_shape(osm_tiles) +
tm_raster() +
tm_shape(lnd_wgs) +
tm_fill("Thefts", fill.title = "Thefts\n(10000)", scale = 0.8, alpha = 0.5) +
tm_layout(legend.position = c(0.89,0.02))
library(tmap)
library(OpenStreetMap)
install.packages("OpenStreetMap")
library(tmap)
library(OpenStreetMap)
remove.packages(c("tmap"))
remove.packages(c("tmap", "OpenStreetMap"))
install.packages('tmap', dependencies = TRUE)
install.packages("tmap", dependencies = TRUE)
install.packages("OpenStreetMap", dependencies = TRUE)
library(tmap)
library(OpenStreetMap)
install.packages('lazyeval')
install.packages("lazyeval")
library(OpenStreetMap)
library(lazyeval)
install.packages("lazyeval")
library(lazyeval)
library(OpenStreetMap)
library(OpenStreetMap)
library(shiny)
runApp('H:/Stockbook/shiny/WIP')
runApp('H:/Stockbook/shiny/WIP')
runApp('H:/Stockbook/shiny/WIP')
runApp('H:/Stockbook/shiny/WIP')
runApp('H:/Stockbook/shiny/WIP')
runApp('H:/Stockbook/shiny/WIP')
runApp('H:/Stockbook/shiny/WIP')
runApp('H:/Stockbook/shiny/WIP')
runApp('H:/Stockbook/shiny/WIP')
runApp('H:/Stockbook/shiny/WIP')
runApp('H:/Stockbook/shiny/WIP')
runApp('H:/Stockbook/shiny/WIP')
runApp('H:/Stockbook/shiny/WIP')
runApp('H:/Stockbook/shiny/WIP')
runApp('H:/Stockbook/shiny/WIP')
library(shiny)
ui <- fluidPage(
selectInput("num", "Choose a number", 1:10),
conditionalPanel(
condition = "output.square",
"That's a perfect square!"
)
)
server <- function(input, output, session) {
output$square <- reactive({
sqrt(as.numeric(input$num)) %% 1 == 0
})
outputOptions(output, 'square', suspendWhenHidden = FALSE)
}
shinyApp(ui = ui, server = server)
runApp('H:/Stockbook/shiny/WIP - 25Oct')
shiny::runApp()
runApp()
runApp('H:/Stockbook/shiny/WIP')
#install.packages("ggplot2")
library(ggplot2)
getwd()
#setwd("Z:/EcosystemDescriptions/StockBook/R_Analysis_Stockbook/2016")
#setwd("C:\\Users\\cnolan\\Desktop\\Stockbook 2016\\R_Analysis_Stockbook\\2016")
#includes merging data files for nephrops, ICES and other
setwd("//galwayfs03/FishData/EcosystemDescriptions/StockBook/R_Analysis_Stockbook/2017")
data<-read.csv("Routput_stock_assessment_2017.csv")
meanF<-data.frame(aggregate (data$relative_F,list(data$Year,data$species_type),mean,droplevels=TRUE, na.rm=TRUE))
meanF
colnames(meanF) <- c("Year","Species_Group","meanF")
meanB<-data.frame(aggregate (data$relative_B,list(data$Year,data$species_type),mean,droplevels=TRUE, na.rm=TRUE))
colnames(meanB) <- c("Year","Species_Group","meanB")
meanB
##Load the ggplot2 library
##Year: x-axis
## SSB: y-axis
ggplot(data=meanF, aes(x=Year, y=meanF, group=Species_Group,colour=Species_Group,
linetype=Species_Group)) +
geom_line(size=1)+
xlim(1990, 2016)+ ylim(0,4)+
geom_abline(aes(slope=0,intercept=1))+
ggtitle("Relative F of all Assessed Stocks\n")+
ylab("Mean of F//Fmsy")+
theme_bw() +
theme(legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
plot.title = element_text(size = 20, face="bold"),
axis.text=element_text(size=16),
axis.title=element_text(size=20,face="bold"),
legend.position = c(.8, .8),
legend.background = element_rect(fill="gray90", size=.5, linetype="dotted")#,
# panel.grid.major = element_blank()
)
ggplot(data=meanF, aes(x=Year, y=meanF, group=Species_Group,colour=Species_Group,
linetype=Species_Group)) +
geom_line(size=1)+
xlim(1990, 2016)+ ylim(0,4)+
geom_abline(aes(slope=0,intercept=1))+
ggtitle("Relative F of all Assessed Stocks\n")+
ylab("Mean of F/Fmsy")+
ggplot(data=meanF, aes(x=Year, y=meanF, group=Species_Group,colour=Species_Group,
linetype=Species_Group)) +
geom_line(size=1)+
xlim(1990, 2016)+ ylim(0,4)+
geom_abline(aes(slope=0,intercept=1))+
ggtitle("Relative F of all Assessed Stocks\n")+
ylab("Mean of F/Fmsy")+
theme_bw() +
theme(legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
plot.title = element_text(size = 20, face="bold"),
axis.text=element_text(size=16),
axis.title=element_text(size=20,face="bold"),
legend.position = c(.8, .8),
legend.background = element_rect(fill="gray90", size=.5, linetype="dotted")#,
# panel.grid.major = element_blank()
)
ggplot(data=meanB, aes(x=Year, y=meanB, group=Species_Group,colour=Species_Group,
linetype=Species_Group)) +
geom_line(size=1)+
xlim(1990, 2016)+ ylim(0,4)+
geom_abline(aes(slope=0,intercept=1))+
ggtitle("Relative SSB of All Assessed Stocks\n")+
ylab("Mean of SSB/Bmsy Trigger")+
theme_bw() +
theme(legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
plot.title = element_text(size = 20, face="bold"),
axis.text=element_text(size=16),
axis.title=element_text(size=20,face="bold"),
legend.position = c(.8, .8),
legend.background = element_rect(fill="gray90", size=.5, linetype="dotted")#,
# panel.grid.major = element_blank()
)
devtools::install_github("ices-tools-prod/fisheryO")
library(fisheryO)
ICESdata=stock_status(2017)
View(ICESdata)
ICESdata=stock_status(2018)
View(ICESdata)
ICES_SAG=read.csv("StockAssessmentGraphs_20181015.csv", header=TRUE)
names(ICES_SAG)
ICES_SAG_BOF=filter(ICES_SAG, Fish_Stock=="boc.27.6-8")
library(dplyr)
ICES_SAG_BOF=filter(ICES_SAG, Fish_Stock=="boc.27.6-8")
ICES_SAG_BOF=filter(ICES_SAG, FishStock=="boc.27.6-8")
ICES_SAG_BOF=filter(ICES_SAG_BOF, Year>2014)
ICES_SAG_BOF
ICES_SAG_BOF=filter(ICES_SAG, FishStock=="cod.27.7e-k")
ICES_SAG_BOF
ICES_SAG_BOF=filter(ICES_SAG_BOF, Year>2014)
ICES_SAG_BOF
ICES_SAG_BOF=filter(ICES_SAG_BOF, Year==2016)
ICES_SAG_BOF
ICES_SAG_BOF=filter(ICES_SAG, FishStock=="cod.27.7a")
ICES_SAG_BOF=filter(ICES_SAG_BOF, Year==2016)
ICES_SAG_BOF
ICES_SAG_BOF=filter(ICES_SAG, FishStock=="cod.27.7a")
ICES_SAG_BOF=filter(ICES_SAG_BOF, Year %in% c(2016,2017))
ICES_SAG_BOF
data_github=load(date_data.rda)
data_github=load("date_data.rda")
View(date_data)
data_github=load("sag_stock_status_raw.rda")
View(date_data)
data_github=load("sag_stock_status_raw.rda")
data_github2=load("sag_stock_status_raw.rda")
view(data_github2)
View(data_github2)
head(data_github2)
library(fisheryO)
data_github2=load("sag_stock_status_raw.rda")
data_github2=load("stock_list_raw.rda")
View(stock_list_raw)
data_github2=load("ices_catch_official_raw.rda")
View(ices_catch_official_raw)
library(icesSAG)
setwd("H:/Stockbook/2018/2018_V1/www/ICES")
for(i in  IrishStocks$New){
graphs <- getSAGGraphs(findAssessmentKey(i, 2018)[1])
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/SAG/2018/", i, ".png", sep=""),
width = 850, height = 650)
plot(graphs)
dev.off()
}
IrishStocks=read.csv("stock_lookupV2.csv", header=TRUE)
dim(IrishStocks)
head(IrishStocks)
colnames(IrishStocks) <- c("ecoregion","Old","sepcies type" ,"New","x")
for(i in  IrishStocks$New){
graphs <- getSAGGraphs(findAssessmentKey(i, 2018)[1])
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/SAG/2018/", i, ".png", sep=""),
width = 850, height = 650)
plot(graphs)
dev.off()
}
library(icesSAG)
setwd("H:/Stockbook/2018/2018_V1/www/ICES")
IrishStocks=read.csv("stock_lookupV2.csv", header=TRUE)
dim(IrishStocks)
head(IrishStocks)
colnames(IrishStocks) <- c("ecoregion","Old","sepcies type" ,"New","x")
for(i in  IrishStocks$New){
graphs <- getSAGGraphs(findAssessmentKey(i, 2018)[1])
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/SAG/2018/", i, ".png", sep=""),
width = 850, height = 650)
plot(graphs)
dev.off()
}
i="nep.fu.16"
graphs <- getSAGGraphs(findAssessmentKey(i, 2018)[1])
graphs <- getSAGGraphs(findAssessmentKey(i, 2018)[1])
plot(graphs)
for(i in  IrishStocks$New){
graphs <- getStockStatusTable(findAssessmentKey(i, 2018)[1])
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/Status/2018/", i, ".png", sep=""),
width = 950, height = 215)
plot(graphs)
dev.off()
}
for(i in  IrishStocks$New){
graphs <- getFishingMortalityHistoricalPerformance(findAssessmentKey(i, 2018)[1])
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/Fishmort/2018/", i, ".png", sep=""),
width = 450, height = 350)
plot(graphs)
dev.off()
}
for(i in  IrishStocks$New){
graphs <- getRecruitmentHistoricalPerformance(findAssessmentKey(i, 2018)[1])
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/RecruitHist/2018/", i, ".png", sep=""),
width = 450, height = 350)
plot(graphs)
dev.off()
}
for(i in  IrishStocks$New){
graphs <- getSSBHistoricalPerformance(findAssessmentKey(i, 2018)[1])
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/SSB/2018/", i, ".png", sep=""),
width = 450, height = 350)
plot(graphs)
dev.off()
}
i="cod.27.1-2"
graphs <- getSAGGraphs(findAssessmentKey(i, 2018)[1])
plot(graphs)
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/SAG/2018/", i, ".png", sep=""),
width = 850, height = 650)
plot(graphs)
dev.off()
graphs <- getStockStatusTable(findAssessmentKey(i, 2018)[1])
plot(graphs)
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/Status/2018/", i, ".png", sep=""),
width = 950, height = 215)
plot(graphs)
dev.off()
graphs <- getSSBHistoricalPerformance(findAssessmentKey(i, 2018)[1])
plot(graphs)
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/SSB/2018/", i, ".png", sep=""),
width = 450, height = 350)
plot(graphs)
dev.off()
graphs <- getFishingMortalityHistoricalPerformance(findAssessmentKey(i, 2018)[1])
plot(graphs)
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/Fishmort/2018/", i, ".png", sep=""),
width = 450, height = 350)
plot(graphs)
dev.off()
graphs <- getRecruitmentHistoricalPerformance(findAssessmentKey(i, 2018)[1])
plot(graphs)
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/RecruitHist/2018/", i, ".png", sep=""),
width = 450, height = 350)
plot(graphs)
dev.off()
shiny::runApp('H:/Stockbook/2018/2018_V1')
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(raster)
library(icesSAG)
setwd("H:/Stockbook/2018/2018_V1/www/ICES")
IrishStocks=read.csv("stock_lookupV2.csv", header=TRUE)
dim(IrishStocks)
head(IrishStocks)
i="whg.27.6b"
graphs <- getSAGGraphs(findAssessmentKey(i, 2018)[1])
plot(graphs)
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/SAG/2018/", i, ".png", sep=""),
width = 850, height = 650)
plot(graphs)
dev.off()
graphs <- getStockStatusTable(findAssessmentKey(i, 2018)[1])
plot(graphs)
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/Status/2018/", i, ".png", sep=""),
width = 950, height = 215)
plot(graphs)
dev.off()
graphs <- getSSBHistoricalPerformance(findAssessmentKey(i, 2018)[1])
plot(graphs)
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/SSB/2018/", i, ".png", sep=""),
width = 450, height = 350)
plot(graphs)
dev.off()
graphs <- getFishingMortalityHistoricalPerformance(findAssessmentKey(i, 2018)[1])
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/Fishmort/2018/", i, ".png", sep=""),
width = 450, height = 350)
plot(graphs)
dev.off()
graphs <- getRecruitmentHistoricalPerformance(findAssessmentKey(i, 2018)[1])
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/RecruitHist/2018/", i, ".png", sep=""),
width = 450, height = 350)
plot(graphs)
dev.off()
i="nep.27.7outfu"
graphs <- getSAGGraphs(findAssessmentKey(i, 2017)[1])
library(icesSAG)
setwd("H:/Stockbook/2018/2018_V1/www/ICES")
graphs <- getSAGGraphs(findAssessmentKey(i, 2017)[1])
plot(graphs)
graphs <- getSAGGraphs(findAssessmentKey(i, 2017)[1])
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/SAG/2017/", i, ".png", sep=""),
width = 850, height = 650)
plot(graphs)
dev.off()
graphs <- getStockStatusTable(findAssessmentKey(i, 2017)[1])
plot(graphs)
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/Status/2017/", i, ".png", sep=""),
width = 950, height = 215)
plot(graphs)
dev.off()
graphs <- getSSBHistoricalPerformance(findAssessmentKey(i, 2017)[1])
plot(graphs)
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/SSB/2017/", i, ".png", sep=""),
width = 450, height = 350)
plot(graphs)
dev.off()
graphs <- getFishingMortalityHistoricalPerformance(findAssessmentKey(i, 2017)[1])
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/Fishmort/2017/", i, ".png", sep=""),
width = 450, height = 350)
plot(graphs)
dev.off()
graphs <- getRecruitmentHistoricalPerformance(findAssessmentKey(i, 2017)[1])
png(file=paste("H:/Stockbook/2018/2018_V1/www/ICES/RecruitHist/2017/", i, ".png", sep=""),
width = 450, height = 350)
plot(graphs)
dev.off()
i
