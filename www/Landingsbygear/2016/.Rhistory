# Run minimisation
cat(paste("\nOptimising retro parameters - last year ", ry, "...\n", sep = ""))
xr.surba <- nls.lm(params0, fn = surbar.retro, control = mqdt.control)
# Extract parameter values
sr <- rep(NA, length = na)
sr[1:(ref.age-1)] <- xr.surba$par[1:(ref.age-1)]
sr[ref.age] <- 1.0
sr[(ref.age+1):(na-1)] <- xr.surba$par[ref.age:(na-2)]
sr[na] <- sr[na-1]
fr <- rep(NA, length = ny)
fr[1:(ny-1)] <- xr.surba$par[(na-1):(na + ny - 3)]
fr[ny] <- mean(fr[(ny-3):(ny-1)])
rr <- xr.surba$par[(na + ny - 2):length(xr.surba$par)]
# Construct population estimates
stockr <- data.frame(array(NA, dim = c(ny,5)))
names(stockr) <- c("year", "rec", "ssb", "tsb", "meanz")
zmortr <- fr %o% sr
lnnr <- array(NA, dim = dim(zmortr))
lnnr[1,] <- rev(rr[1:dim(lnnr)[2]])
lnnr[2:dim(lnnr)[1],1] <- rr[(dim(lnnr)[2]+1):length(rr)]
# Oldest true age
wk.ota <- dim(zmortr)[1]
for (j in 2:dim(zmortr)[2])
{
for (i in 2:dim(zmortr)[1])
{
lnnr[i,j] <- lnnr[i-1,j-1] - zmortr[i-1,j-1]
}
}
nr <- exp(lnnr)
stockr$year <- y1:y2
stockr$meanz <- apply(zmortr[,zbarage.1:zbarage.2], 1, mean)
stockr$rec <- exp(rr[na:length(rr)])
stockr$ssb <- apply(nr * swr * matr, 1, sum)
stockr$tsb <- apply(nr * swr, 1, sum)
# Mean-standardise rec, ssb, tsb using full time-series means
#mean.rec <- mean(stock$rec)
#mean.ssb <- mean(stock$ssb)
#mean.tsb <- mean(stock$tsb)
#stockr$rec <- stockr$rec / mean.rec
#stockr$ssb <- stockr$ssb / mean.ssb
#stockr$tsb <- stockr$tsb / mean.tsb
# Mean-standardise rec, ssb, tsb using full time-series means
mean.rec <- mean(stock$rec)
mean.ssb <- mean(stock$ssb)
mean.tsb <- mean(stock$tsb)
stockr$rec <- stockr$rec / mean.rec
stockr$ssb <- stockr$ssb / mean.ssb
stockr$tsb <- stockr$tsb / mean.tsb
retro.stock[[kk]] <- stockr
}
# Plot retros (this also needs to be rewritten as a part of the
# plot.surbar function)
if (!pdf.plots)
{
windows(width = 10, height = 7)
}
par(mfrow = c(2,2), mar = c(5,4,1,1)+0.1)
# Mean Z
x.meanz <- do.call(rbind, lapply(x.psim.stock, function(wk){wk$meanz}))
x.meanz.quantile <- array(NA, dim = c(dim(x.meanz)[2],5))
x.meanz.mean <- rep(NA, dim(x.meanz)[2])
y2 <- max(as.numeric(rownames(sw)))
rownames(x.meanz.quantile) <- y1:y2
colnames(x.meanz.quantile) <- c("5%","25%","50%","75%","95%")
for (i in 1:dim(x.meanz)[2])
{
x.meanz.quantile[i,] <- quantile(x.meanz[,i], c(0.05, 0.25, 0.5, 0.75, 0.95))
x.meanz.mean[i] <- mean(x.meanz[,i])
}
plot(y1:y2, x.meanz.quantile[,3], type = "n", lty = 1,
xlab = "Year", ylab = "Mean Z",
ylim = c(min(0, x.meanz.quantile), max(x.meanz.quantile)))
polygon(x = c(y1:y2, rev(y1:y2)),
y = c(x.meanz.quantile[,1], rev(x.meanz.quantile[,5])), density = -1,
col = "lightgrey", lty = 0)
lines(y1:y2, x.meanz.quantile[,3], lty = 1, col = "black", lwd = 2)
points(y2-1, x.meanz.quantile[ch(y2-1),3], pch = 16, col = "black")
for (k in 1:length(retro.stock))
{
lines(retro.stock[[k]]$year, retro.stock[[k]]$meanz, lty = 1, col = "red")
ly.less <- max(retro.stock[[k]]$year)-1
points(ly.less, retro.stock[[k]][retro.stock[[k]]$year == ly.less,]$meanz,
pch = 16, col = "red")
}
# SSB
x.ssb <- do.call(rbind, lapply(x.psim.stock, function(wk){wk$ssb}))
x.ssb.quantile <- array(NA, dim = c(dim(x.ssb)[2],5))
x.ssb.mean <- rep(NA, dim(x.ssb)[2])
y2 <- max(as.numeric(rownames(sw)))
rownames(x.ssb.quantile) <- y1:y2
colnames(x.ssb.quantile) <- c("5%","25%","50%","75%","95%")
for (i in 1:dim(x.ssb)[2])
{
x.ssb.quantile[i,] <- quantile(x.ssb[,i], c(0.05, 0.25, 0.5, 0.75, 0.95))
x.ssb.mean[i] <- mean(x.ssb[,i])
}
plot(y1:y2, x.ssb.quantile[,3], type = "n", lty = 1,
xlab = "Year", ylab = "SSB",
ylim = c(min(0, x.ssb.quantile), max(x.ssb.quantile)))
polygon(x = c(y1:y2, rev(y1:y2)),
y = c(x.ssb.quantile[,1], rev(x.ssb.quantile[,5])), density = -1,
col = "lightgrey", lty = 0)
lines(y1:y2, x.ssb.quantile[,3], lty = 1, col = "black", lwd = 2)
for (k in 1:length(retro.stock))
{
lines(retro.stock[[k]]$year, retro.stock[[k]]$ssb, lty = 1, col = "red")
}
# TSB
x.tsb <- do.call(rbind, lapply(x.psim.stock, function(wk){wk$tsb}))
x.tsb.quantile <- array(NA, dim = c(dim(x.tsb)[2],5))
x.tsb.mean <- rep(NA, dim(x.tsb)[2])
y2 <- max(as.numeric(rownames(sw)))
rownames(x.tsb.quantile) <- y1:y2
colnames(x.tsb.quantile) <- c("5%","25%","50%","75%","95%")
for (i in 1:dim(x.tsb)[2])
{
x.tsb.quantile[i,] <- quantile(x.tsb[,i], c(0.05, 0.25, 0.5, 0.75, 0.95))
x.tsb.mean[i] <- mean(x.tsb[,i])
}
plot(y1:y2, x.tsb.quantile[,3], type = "n", lty = 1,
xlab = "Year", ylab = "TSB",
ylim = c(min(0, x.tsb.quantile), max(x.tsb.quantile)))
polygon(x = c(y1:y2, rev(y1:y2)),
y = c(x.tsb.quantile[,1], rev(x.tsb.quantile[,5])), density = -1,
col = "lightgrey", lty = 0)
lines(y1:y2, x.tsb.quantile[,3], lty = 1, col = "black", lwd = 2)
for (k in 1:length(retro.stock))
{
lines(retro.stock[[k]]$year, retro.stock[[k]]$tsb, lty = 1, col = "red")
}
# Recruitment
x.rec <- do.call(rbind, lapply(x.psim.stock, function(wk){wk$rec}))
x.rec.quantile <- array(NA, dim = c(dim(x.rec)[2],5))
x.rec.mean <- rep(NA, dim(x.rec)[2])
y2 <- max(as.numeric(rownames(sw)))
rownames(x.rec.quantile) <- y1:y2
colnames(x.rec.quantile) <- c("5%","25%","50%","75%","95%")
for (i in 1:dim(x.rec)[2])
{
x.rec.quantile[i,] <- quantile(x.rec[,i], c(0.05, 0.25, 0.5, 0.75, 0.95))
x.rec.mean[i] <- mean(x.rec[,i])
}
plot(y1:y2, x.rec.quantile[,3], type = "n", lty = 1,
xlab = "Year", ylab = "Recruitment",
ylim = c(min(0, x.rec.quantile), max(x.rec.quantile)))
polygon(x = c(y1:y2, rev(y1:y2)),
y = c(x.rec.quantile[,1], rev(x.rec.quantile[,5])), density = -1,
col = "lightgrey", lty = 0)
lines(y1:y2, x.rec.quantile[,3], lty = 1, col = "black", lwd = 2)
for (k in 1:length(retro.stock))
{
lines(retro.stock[[k]]$year, retro.stock[[k]]$rec, lty = 1, col = "red")
}
#####################################################################################
# Stop timer and report
stop.time <- Sys.time()
cat(paste("\nRun complete in:", round(stop.time - start.time, 3), "s\n"))
# Close output
if (pdf.plots)
{
dev.off()
}
sole<-data.frame(x=0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88),
sole<-data.frame(
x=(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88),
y=(782,955,662,850,896,1270,1354,2089)
)
plot(sole$x,sole$y, type="o")
sole<-data.frame(
x=(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88),
y=(782,955,662,850,896,1270,1354,2089)
)
sole<-data.frame(
x=c(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88),
y=c(782,955,662,850,896,1270,1354,2089)
)
plot(sole$x,sole$y, type="o")
model <- linearInterpol(sole)
known <- data.frame(
x = c(0:6),
y = c(0, 10, 20, 23, 41, 39, 61)
)
plot (known$x, known$y, type="o")
abline(v = aim, col = "#ff0000")
model <- approx(sole)
model$getEstimation(0.3)
model
model(0.3)
get.y(model,0.3)
model <- approx(sole,xout=y)
model <- approx(sole,xout="y")
View(sole)
model <- approx(sole,xout)
x=c(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(782,955,662,850,896,1270,1354,2089)
approx(x,y, xout)
approx(x,y, 0.3)
model <- approx(sole,0.3)
sole<-data.frame(
x=c(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88),
y=c(782,955,662,850,896,1270,1354,2089)
)
model <- approx(sole,0.3)
sole<-function(xout){
approx(x,y, xout)
return($y)
}
sole<-function(xout){
x=c(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(782,955,662,850,896,1270,1354,2089)
approx(x,y, xout)
return($y)
}
sole<-function(xout){
x=c(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(782,955,662,850,896,1270,1354,2089)
approx(x,y, xout)
return(y)
}
sole(0.3)
sole(0.8)
sole<-function(xout){
x=c(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(782,955,662,850,896,1270,1354,2089)
approx(x,y, xout)
return($y)
}
x=c(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(782,955,662,850,896,1270,1354,2089)
approx(x,y,0.3)
sole<-function(xout){
x=c(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(782,955,662,850,896,1270,1354,2089)
approx(x,y, xout)
}
sole(0.3)
sole<-function(xout){
x=c(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(782,955,662,850,896,1270,1354,2089)
approx(x,y, xout)
print$y
}
sole(0.3)
sole<-function(xout){
x=c(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(782,955,662,850,896,1270,1354,2089)
approx(x,y, xout)
print($y)
}
sole<-function(xout){
x=c(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(782,955,662,850,896,1270,1354,2089)
approx(x,y, xout)
print(y)
}
sole(0.3)
View(sole)
sole<-function(xout){
x=c(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(782,955,662,850,896,1270,1354,2089)
approx(x,y, xout)
print(approx(x,y, xout)$y)
}
sole(0.3)
sole(0.3,0.8)
sole<-function(xout,xout){
x=c(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(782,955,662,850,896,1270,1354,2089)
approx(x,y, xout)
print(approx(x,y, xout)$y)
}
sole<-function(){
x=c(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(782,955,662,850,896,1270,1354,2089)
approx(x,y, xout)
print(approx(x,y, xout)$y)
}
sole(0.3,0.8)
sole<-function(){
x=c(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(782,955,662,850,896,1270,1354,2089)
approx(x,y, xout)
print(approx(x,y, xout)$y)
}
sole(0.3)
sole<-function(xout){
x=c(0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(782,955,662,850,896,1270,1354,2089)
approx(x,y, xout)
print(approx(x,y, xout)$y)
}
sole(0.3)
sole(0.15)
sole(0.42)
sole(0.38)
sole<-function(xout){
x=c(0,0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(0,782,955,662,850,896,1270,1354,2089)
approx(x,y, xout)
print(approx(x,y, xout)$y)
}
sole(0.15)
sole<-data.frame(
x=c(0,0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88),
y=c(0,782,955,662,850,896,1270,1354,2089)
)
plot(sole$x,sole$y, type="o")
MSY Range<-function(xout){
x=c(0,0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(0,782,955,662,850,896,1270,1354,2089)
approx(x,y, xout)
print(approx(x,y, xout)$y)
}
MSY Range(0.15)
MSYrange<-function(xout){
x=c(0,0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(0,782,955,662,850,896,1270,1354,2089)
approx(x,y, xout)
print(approx(x,y, xout)$y)
}
MSYrange(0.15)
MSYrange(0.42)
sole<-data.frame(
x=c(0,0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88),
y=c(0,782,955,662,850,896,1270,1354,2089)
)
MSYrange<-function(xout){
x=c(0,0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(0,782,955,662,850,896,1270,1354,2089)
approx(sole, xout)
print(approx(sole xout)$y)
}
MSYrange<-function(xout){
x=c(0,0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(0,782,955,662,850,896,1270,1354,2089)
approx(sole, xout)
print(approx(sole, xout)$y)
}
MSYrange(0.42)
sole<-data.frame(
x=c(0,0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88),
y=c(0,782,955,662,850,896,1270,1354,2089)
)
View(sole)
MSYrange<-function(xout){
x=c(0,0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y=c(0,782,955,662,850,896,1270,1354,2089)
approx(sole$x,sole$y, xout)
print(approx(sole$x,sole$y,  xout)$y)
}
MSYrange(0.42)
x<-c(0,0.27,0.34,0.22,0.3,0.32,0.48,0.52,0.88)
y<-c(0,782,955,662,850,896,1270,1354,2089)
MSYrange<-function(xout){
approx(x,y, xout)
print(approx(x,y,xout)$y)
}
MSYrange(0.42)
plot(x,y, type="o")
y=(0,30,34,40,46,48,147,294,308,410)
x=(0,0.019,0.021,0.025,0.029,0.03,0.095,0.2,0.21,0.29)
x=c(0,0.019,0.021,0.025,0.029,0.03,0.095,0.2,0.21,0.29)
y=c(0,30,34,40,46,48,147,294,308,410)
plot(x,y, type="o")
x=c(0,0.019,0.021,0.025,0.029,0.03,0.095,0.2,0.21,0.29)
y=c(0,30,34,40,46,48,147,294,308,410)
plot(x,y, type="o")
MSYrange<-function(xout){
approx(x,y, xout)
print(approx(x,y,xout)$y)
}
MSYrange(0.2)
MSYrange(0.16)
MSYrange(0.24)
species<-Sole
x=c(0,0.019,0.021,0.025,0.029,0.03,0.095,0.2,0.21,0.29)
y=c(0,33,37,43,50,52,160,320,335,446)
plot(x,y, type="o")
MSYrange<-function(xout){
approx(x,y, xout)
print(approx(x,y,xout)$y)
}
MSYrange(0.24)
MSYrange(0.16)
MSYrange(0.2)
library(RODBC)
library(RColorBrewer)
setwd('F:\\StockBooks\\_Stockbook2016\\Plots\\LandingsByGear')
pal <- brewer.pal(9, 'Blues')
Q <- "
select stock
,gear
,sum(landWt) as landWt
from(
select datepart(year,d.LandingDate) as year
,case when substring(d.GearType,1,1) = 'G' then 'Gillnets'
when substring(d.GearType,1,3) in ('TBB') then 'Beam trawls'
when substring(d.GearType,1,3) in ('OTM') then 'Midwater trawls'
when substring(d.GearType,1,1) in ('O','T') then 'Bottom otter trawls'
when substring(d.GearType,1,1) in ('P','S') then 'Seines'
else 'Others' end as gear
,d.EstKgWeightSUM as landWt
,FSS_Speciesname as stock
from Declarations as d
join SpeciesLookup as s
on d.SpeciesID = s.SpeciesID
join Vessels as v
on d.VesselID = v.VesselID
left join MarinePortLookup p
on d.LandingPortID = p.MarinePortID
left join IcesLookup i
on d.Division = i.IcesDivision
left join IntercatchSpeciesLut sl -- should really link to table in stockman2015_views
on s.ScientificName = sl.ScientificName
where v.VesselProvenance='Ireland'
and (FSS_Speciesname like '%ray%' or FSS_Speciesname like '%skate%')and coalesce(i.IcesDivisionCorrect,d.Division) in ('VIa','VIb','VIIa','VIIb','VIIc','VIId','VIIe','VIIf','VIIg','VIIh','VIIj','VIIk')
union all select datepart(year,d.EndDate) as year
,'Others' as gear
,d.EstLiveWeightSUM as landWt
,FSS_Speciesname as stock
from Under10MeterLandings as d
join SpeciesLookup as s
on d.SpeciesID = s.SpeciesID
left join MarinePortLookup p
on	d.MarinePortID = p.MarinePortID
left join IcesLookup i
on d.Division = i.IcesDivision
left join IntercatchSpeciesLut sl
on s.ScientificName = sl.ScientificName
where 1=1
and (FSS_Speciesname like '%ray%' or FSS_Speciesname like '%skate%')and coalesce(i.IcesDivisionCorrect,d.Division) in ('VIa','VIb','VIIa','VIIb','VIIc','VIId','VIIe','VIIf','VIIg','VIIh','VIIj','VIIk')
)x
where year = 2015
group by stock
,gear
order by stock
,gear
"
channel <- odbcDriverConnect("Driver=SQL Server; Server=VMFSSDEV02; Database=Logbooks_20160412")
land <- sqlQuery(channel,Q)
close(channel)
table(land$stock)
table(land$gear)
land$gear <- ordered(land$gear, c("Others", "Seines", "Midwater trawls", "Gillnets", "Bottom otter trawls",
"Beam trawls")
)
for(s in levels(land$stock)) {
t <- with(subset(land,stock==s), tapply(landWt,gear,sum))
t <- ifelse(is.na(t),0,t)
cat(s,'\n')
png(paste0(s,' in VI and VII.png'),4,1.75,'in',8,'white',600)
par(mar=c(4,8.5,2,1))
barplot(sort(t)/1000,xlim=extendrange(c(0,max(t)/1000),f=0.02),horiz=T,col=pal[7],border=pal[9],space=0.5,las=1,xlab='Tonnes',main = 'Irish landings by gear type')
box()
dev.off()
}
library(RODBC)
library(RColorBrewer)
library(dplyr)
setwd('H:/Stockbook/shiny/WIP/www/Landingsbygear/2016')
pal <- brewer.pal(9, 'Blues')
#Landings by Gear by FU
#Data from \\galwayfs03\FishData\Data for ICESWG\2017\NEP functions
land=read.csv("LandingsByGearbyFU.csv", header=TRUE)
table(land$stock)
table(land$gear)
land$gear <- ordered(land$gear, c("Others", "Seines", "Midwater trawls", "Gillnets", "Bottom otter trawls",
"Beam trawls")
)
#2015 only
land=filter(land, year=="2015")
table(land$stock)
table(land$gear)
for(s in levels(factor(land$stock))) {
t <- with(subset(land,stock==s), tapply(landWt,gear,sum))
t <- ifelse(is.na(t),0,t)
cat(s,'\n')
png(paste0('nep-', s,'.png'),4,1.75,'in',8,'white',600)
par(mar=c(4,8.5,2,1))
barplot(sort(t)/1000,xlim=extendrange(c(0,max(t)/1000),f=0.02),horiz=T,col=pal[7],border=pal[9],space=0.5,las=1,xlab='Tonnes',main = 'Irish landings by gear type')
box()
dev.off()
}
shiny::runApp('H:/Stockbook/shiny/WIP')
library(RODBC)
library(RColorBrewer)
library(dplyr)
setwd('H:/Stockbook/shiny/WIP/www/Landingsbygear/2016')
pal <- brewer.pal(9, 'Blues')
#Landings by Gear by FU
#Data from \\galwayfs03\FishData\Data for ICESWG\2017\NEP functions
land=read.csv("LandingsByGearbyFU.csv", header=TRUE)
table(land$stock)
table(land$gear)
land$gear <- ordered(land$gear, c("Others", "Seines", "Midwater trawls", "Gillnets", "Bottom otter trawls",
"Beam trawls")
)
#2015 only
land=filter(land, year=="2015")
table(land$stock)
table(land$gear)
for(s in levels(factor(land$stock))) {
t <- with(subset(land,stock==s), tapply(landWt,gear,sum))
t <- ifelse(is.na(t),0,t)
cat(s,'\n')
png(paste0('nep-', s,'.png'),4,1.75,'in',8,'white',600)
par(mar=c(4,8.5,2,1))
barplot(sort(t)/1000,xlim=extendrange(c(0,max(t)/1000),f=0.02),horiz=T,col=pal[7],border=pal[9],space=0.5,las=1,xlab='Tonnes',main = 'Irish landings by gear type')
box()
dev.off()
}
