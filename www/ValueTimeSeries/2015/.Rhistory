width = 450, height = 350)
plot(graphs)
dev.off()
i="meg-4a6a"
j=2016
graphs <- getSAGGraphs(findAssessmentKey(i, j)[1])
i="had.27.46a20"
graphs <- getSAGGraphs(findAssessmentKey(i, 2017)[1])
plot(graphs)
i="hke.27.3a46-8abd
"
i
i="hke.27.3a46-8abd"
graphs <- getSSBHistoricalPerformance(findAssessmentKey(i, 2017)[1])
plot(graphs)
png(file=paste("H:/Stockbook/shiny/WIP/www/ICES/SSB/2017/", i, ".png", sep=""),
width = 450, height = 350)
plot(graphs)
dev.off()
i="meg-4a6a"
j
graphs <- getSAGGraphs(findAssessmentKey(i, j)[1])
j=2015
graphs <- getSAGGraphs(findAssessmentKey(i, j)[1])
j=2016
i="sol-7b-c"
graphs <- getSAGGraphs(findAssessmentKey(i, j)[1])
i="ple.27.6"
i="ple-7b-c"
j
graphs <- getSAGGraphs(findAssessmentKey(i, j)[1])
i="ple-7h-k"
graphs <- getSSBHistoricalPerformance(findAssessmentKey(i, j)[1])
plot(graphs)
i="pol.27.67"
graphs <- getSAGGraphs(findAssessmentKey(i, 2017)[1])
plot(graphs)
png(file=paste("H:/Stockbook/shiny/WIP/www/ICES/SAG/2017/", i, ".png", sep=""),
width = 850, height = 650)
plot(graphs)
dev.off()
graphs <- getStockStatusTable(findAssessmentKey(i, 2017)[1])
plot(graphs)
png(file=paste("H:/Stockbook/shiny/WIP/www/ICES/Status/2017/", i, ".png", sep=""),
width = 650, height = 250)
plot(graphs)
dev.off()
graphs <- getSSBHistoricalPerformance(findAssessmentKey(i, 2017)[1])
plot(graphs)
png(file=paste("H:/Stockbook/shiny/WIP/www/ICES/SSB/2017/", i, ".png", sep=""),
width = 450, height = 350)
plot(graphs)
dev.off()
graphs <- getFishingMortalityHistoricalPerformance(findAssessmentKey(i, 2017)[1])
png(file=paste("H:/Stockbook/shiny/WIP/www/ICES/Fishmort/2017/", i, ".png", sep=""),
width = 450, height = 350)
plot(graphs)
dev.off()
}
graphs <- getRecruitmentHistoricalPerformance(findAssessmentKey(i, 2017)[1])
png(file=paste("H:/Stockbook/shiny/WIP/www/ICES/RecruitHist/2017/", i, ".png", sep=""),
width = 450, height = 350)
plot(graphs)
dev.off()
i="pol-celt"
runApp('H:/Stockbook/shiny/WIP')
runApp('H:/Stockbook/shiny/WIP')
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shinyApp(ui, server)
runApp('test.R')
install.packages("shinydashboard")
runApp('test.R')
runApp()
shiny::runApp()
library(shiny)
runApp(
list(ui = fluidPage(
titlePanel("Nancy's Brainstorming"),
sidebarLayout(
sidebarPanel(
h3(
strong("What is this?", style = "font-si24pt")),
p("This is a pilot project."),
sliderInput("slider", label = "", min = 100, max = 300, value = 200),
uiOutput('logo')
),
mainPanel(
plotOutput("distPlot")
)
)
),
server = function(input, output, session) {
output$logo <- renderUI({
img(src = "http://i.stack.imgur.com/mTqXa.png", width = as.integer(input$slider))
})
}
)
)
x="10%"
x
x+1
as.integer(x)+1
library(shiny)
runApp(
list(ui = fluidPage(
titlePanel("Nancy's Brainstorming"),
sidebarLayout(
sidebarPanel(
h3(
strong("What is this?", style = "font-si24pt")),
p("This is a pilot project."),
sliderInput("slider", label = "", min = 0, max = 100, value = 0),
uiOutput('logo')
),
mainPanel(
plotOutput("distPlot")
)
)
),
server = function(input, output, session) {
output$logo <- renderUI({
img(src = "http://i.stack.imgur.com/mTqXa.png", width = 200*(1+as.integer(input$slider)/100)
})
}
)
)
library(shiny)
runApp(
list(ui = fluidPage(
titlePanel("Nancy's Brainstorming"),
sidebarLayout(
sidebarPanel(
h3(
strong("What is this?", style = "font-si24pt")),
p("This is a pilot project."),
sliderInput("slider", label = "", min = 0, max = 100, value = 0),
uiOutput('logo')
),
mainPanel(
plotOutput("distPlot")
)
)
),
server = function(input, output, session) {
output$logo <- renderUI({
img(src = "http://i.stack.imgur.com/mTqXa.png", width = 200*(1+as.integer(input$slider)/100))
})
}
)
)
library(shiny)
runApp(
list(ui = fluidPage(
titlePanel("Zooming Brainstorming"),
sidebarLayout(
sidebarPanel(
#h3(
#  strong("What is this?", style = "font-si24pt")),
p("Zoom in %"),
sliderInput("slider", label = "", min = 0, max = 100, value = 0),
uiOutput('logo')
),
mainPanel(
plotOutput("distPlot")
)
)
),
server = function(input, output, session) {
output$logo <- renderUI({
img(src = "http://i.stack.imgur.com/mTqXa.png", width = 200*(1+as.integer(input$slider)/100))
})
}
)
)
runApp()
library(shiny)
runApp(
list(ui = fluidPage(
titlePanel("Zooming Brainstorming"),
sidebarLayout(
sidebarPanel(
#h3(
#  strong("What is this?", style = "font-si24pt")),
p("Zoom in %"),
sliderInput("slider", label = "", min = 0, max = 100, value = 0),
uiOutput('logo')
),
mainPanel(
plotOutput("distPlot")
)
)
),
server = function(input, output, session) {
output$logo <- renderUI({
img(src = "http://i.stack.imgur.com/mTqXa.png", width = 200*(1+as.integer(input$slider)/100))
})
}
)
)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
library(RODBC)
library(RColorBrewer)
setwd('H:\\Stockbook\\shiny\\WIP\\www\\ValueTimeSeries\\2017')
pal <- brewer.pal(9, 'Blues')
Q <- "
select datepart(yy,a.DepartureDate) as Year
,case when FAQDesc in ('Tuna Albacore','Tuna Northern Bluefin') then FAQDesc else FSS_SpeciesName end as species
,sum(a.EstKgWeightSUM) / 1000 as LiveWtTonnes
,sum(a.EstKgWeightSUM * b.PricePerKgLiveWt) /sum(a.EstKgWeightSUM) as MeanPricePerKgLiveWt
from declarations a
join stecf.FishPrice_Division b
on a.LogID = b.LogID
and a.LogDeclarationID = b.LogDeclarationID
and a.SpeciesID = b.SpeciesID
join SpeciesLookup c
on a.SpeciesID = c.SpeciesID
join vessels d
on a.VesselID = d.VesselID
where d.VesselProvenance = 'ireland'
and datepart(yy,departuredate) between 2006 and 2015
group by datepart(yy,a.DepartureDate)
,case when FAQDesc in ('Tuna Albacore','Tuna Northern Bluefin') then FAQDesc else FSS_SpeciesName end
order by datepart(yy,a.DepartureDate)
,case when FAQDesc in ('Tuna Albacore','Tuna Northern Bluefin') then FAQDesc else FSS_SpeciesName end
"
Q <- "
select datepart(yy,a.DepartureDate) as Year
,FSS_SpeciesName as species
,sum(a.EstKgWeightSUM) / 1000 as LiveWtTonnes
,sum(a.EstKgWeightSUM * b.PricePerKgLiveWt) /sum(a.EstKgWeightSUM) as MeanPricePerKgLiveWt
from declarations a
join stecf.FishPrice_Division b
on a.LogID = b.LogID
and a.LogDeclarationID = b.LogDeclarationID
and a.SpeciesID = b.SpeciesID
join SpeciesLookup c
on a.SpeciesID = c.SpeciesID
join vessels d
on a.VesselID = d.VesselID
where d.VesselProvenance = 'ireland'
and datepart(yy,departuredate) between 2007 and 2016
group by datepart(yy,a.DepartureDate)
,FSS_SpeciesName
order by datepart(yy,a.DepartureDate)
,FSS_SpeciesName
"
channel <- odbcDriverConnect("Driver=SQL Server; Server=VMFSSDEV02; Database=Logbooks_20170327")
land <- sqlQuery(channel,Q)
close(channel)
table(land$species)
land$YearFact <- factor(land$Year)
land <- subset(land,species!="Mackerel Chub\r\n\t")
sort(unique(land$species))
s="Cod"
t <- with(subset(land,species==s),tapply(LiveWtTonnes*MeanPricePerKgLiveWt/1000,list(YearFact),sum))
S <- ifelse(s=='Sole Black','Sole',s)
S <- ifelse(s=='Monkfish','Anglerfish',S)
par(mar=c(3,4,2.5,0))
barplot(t,las=3,col=pal[7],ylab='Value (millions \u20ac)',main=paste(S,'- value of Irish landings'))
runApp('H:/Stockbook/shiny/WIP')
png(paste0(sub('/','-',S),'.png'),3,2,'in',8,'white',600)
par(mar=c(3,4,2.5,0))
barplot(t,las=3,col=pal[7],ylab='Value (millions \u20ac)',main=paste(S,'- value of Irish landings'))
dev.off()
cat(s,t['2016'],'\n')
}
for(s in sort(unique(land$species))) {
t <- with(subset(land,species==s),tapply(LiveWtTonnes*MeanPricePerKgLiveWt/1000,list(YearFact),sum))
S <- ifelse(s=='Sole Black','Sole',s)
S <- ifelse(s=='Monkfish','Anglerfish',S)
png(paste0(sub('/','-',S),'.png'),3,2,'in',8,'white',600)
par(mar=c(3,4,2.5,0))
barplot(t,las=3,col=pal[7],ylab='Value (millions \u20ac)',main=paste(S,'- value of Irish landings'))
dev.off()
cat(s,t['2016'],'\n')
}
setwd('H:\\Stockbook\\shiny\\WIP\\www\\ValueTimeSeries\\2016')
pal <- brewer.pal(9, 'Blues')
Q <- "
select datepart(yy,a.DepartureDate) as Year
,case when FAQDesc in ('Tuna Albacore','Tuna Northern Bluefin') then FAQDesc else FSS_SpeciesName end as species
,sum(a.EstKgWeightSUM) / 1000 as LiveWtTonnes
,sum(a.EstKgWeightSUM * b.PricePerKgLiveWt) /sum(a.EstKgWeightSUM) as MeanPricePerKgLiveWt
from declarations a
join stecf.FishPrice_Division b
on a.LogID = b.LogID
and a.LogDeclarationID = b.LogDeclarationID
and a.SpeciesID = b.SpeciesID
join SpeciesLookup c
on a.SpeciesID = c.SpeciesID
join vessels d
on a.VesselID = d.VesselID
where d.VesselProvenance = 'ireland'
and datepart(yy,departuredate) between 2006 and 2015
group by datepart(yy,a.DepartureDate)
,case when FAQDesc in ('Tuna Albacore','Tuna Northern Bluefin') then FAQDesc else FSS_SpeciesName end
order by datepart(yy,a.DepartureDate)
,case when FAQDesc in ('Tuna Albacore','Tuna Northern Bluefin') then FAQDesc else FSS_SpeciesName end
"
Q <- "
select datepart(yy,a.DepartureDate) as Year
,FSS_SpeciesName as species
,sum(a.EstKgWeightSUM) / 1000 as LiveWtTonnes
,sum(a.EstKgWeightSUM * b.PricePerKgLiveWt) /sum(a.EstKgWeightSUM) as MeanPricePerKgLiveWt
from declarations a
join stecf.FishPrice_Division b
on a.LogID = b.LogID
and a.LogDeclarationID = b.LogDeclarationID
and a.SpeciesID = b.SpeciesID
join SpeciesLookup c
on a.SpeciesID = c.SpeciesID
join vessels d
on a.VesselID = d.VesselID
where d.VesselProvenance = 'ireland'
and datepart(yy,departuredate) between 2006 and 2015
group by datepart(yy,a.DepartureDate)
,FSS_SpeciesName
order by datepart(yy,a.DepartureDate)
,FSS_SpeciesName
"
channel <- odbcDriverConnect("Driver=SQL Server; Server=VMFSSDEV02; Database=Logbooks_20160412")
land <- sqlQuery(channel,Q)
close(channel)
table(land$species)
land$YearFact <- factor(land$Year)
land <- subset(land,species!="Mackerel Chub\r\n\t")
s="Cod"
t <- with(subset(land,species==s),tapply(LiveWtTonnes*MeanPricePerKgLiveWt/1000,list(YearFact),sum))
S <- ifelse(s=='Sole Black','Sole',s)
S <- ifelse(s=='Monkfish','Anglerfish',S)
par(mar=c(3,4,2.5,0))
barplot(t,las=3,col=pal[7],ylab='Value (millions \u20ac)',main=paste(S,'- value of Irish landings'))
channel <- odbcDriverConnect("Driver=SQL Server; Server=VMFSSDEV02; Database=Logbooks_20170327")
land <- sqlQuery(channel,Q)
close(channel)
table(land$species)
land$YearFact <- factor(land$Year)
land <- subset(land,species!="Mackerel Chub\r\n\t")
t <- with(subset(land,species==s),tapply(LiveWtTonnes*MeanPricePerKgLiveWt/1000,list(YearFact),sum))
S <- ifelse(s=='Sole Black','Sole',s)
S <- ifelse(s=='Monkfish','Anglerfish',S)
par(mar=c(3,4,2.5,0))
barplot(t,las=3,col=pal[7],ylab='Value (millions \u20ac)',main=paste(S,'- value of Irish landings'))
for(s in sort(unique(land$species))) {
t <- with(subset(land,species==s),tapply(LiveWtTonnes*MeanPricePerKgLiveWt/1000,list(YearFact),sum))
S <- ifelse(s=='Sole Black','Sole',s)
S <- ifelse(s=='Monkfish','Anglerfish',S)
png(paste0(sub('/','-',S),'.png'),3,2,'in',8,'white',600)
par(mar=c(3,4,2.5,0))
barplot(t,las=3,col=pal[7],ylab='Value (millions \u20ac)',main=paste(S,'- value of Irish landings'))
dev.off()
cat(s,'\n')
}
setwd('H:/Stockbook/shiny/WIP/www/ValueTimeSeries/2015')
pal <- brewer.pal(9, 'Blues')
Q <- "
select datepart(yy,a.DepartureDate) as Year
,case when FAQDesc in ('Tuna Albacore','Tuna Northern Bluefin') then FAQDesc else FSS_SpeciesName end as species
,sum(a.EstKgWeightSUM) / 1000 as LiveWtTonnes
,sum(a.EstKgWeightSUM * b.PricePerKgLiveWt) /sum(a.EstKgWeightSUM) as MeanPricePerKgLiveWt
from declarations a
join stecf.FishPrice_Division b
on a.LogID = b.LogID
and a.LogDeclarationID = b.LogDeclarationID
and a.SpeciesID = b.SpeciesID
join SpeciesLookup c
on a.SpeciesID = c.SpeciesID
join vessels d
on a.VesselID = d.VesselID
where d.VesselProvenance = 'ireland'
and datepart(yy,departuredate) between 2005 and 2014
group by datepart(yy,a.DepartureDate)
,case when FAQDesc in ('Tuna Albacore','Tuna Northern Bluefin') then FAQDesc else FSS_SpeciesName end
order by datepart(yy,a.DepartureDate)
,case when FAQDesc in ('Tuna Albacore','Tuna Northern Bluefin') then FAQDesc else FSS_SpeciesName end
"
Q <- "
select datepart(yy,a.DepartureDate) as Year
,FSS_SpeciesName as species
,sum(a.EstKgWeightSUM) / 1000 as LiveWtTonnes
,sum(a.EstKgWeightSUM * b.PricePerKgLiveWt) /sum(a.EstKgWeightSUM) as MeanPricePerKgLiveWt
from declarations a
join stecf.FishPrice_Division b
on a.LogID = b.LogID
and a.LogDeclarationID = b.LogDeclarationID
and a.SpeciesID = b.SpeciesID
join SpeciesLookup c
on a.SpeciesID = c.SpeciesID
join vessels d
on a.VesselID = d.VesselID
where d.VesselProvenance = 'ireland'
and datepart(yy,departuredate) between 2006 and 2015
group by datepart(yy,a.DepartureDate)
,FSS_SpeciesName
order by datepart(yy,a.DepartureDate)
,FSS_SpeciesName
"
channel <- odbcDriverConnect("Driver=SQL Server; Server=VMFSSDEV02; Database=Logbooks_20170327")
land <- sqlQuery(channel,Q)
close(channel)
table(land$species)
land$YearFact <- factor(land$Year)
land <- subset(land,species!="Mackerel Chub\r\n\t")
s="Cod"
t <- with(subset(land,species==s),tapply(LiveWtTonnes*MeanPricePerKgLiveWt/1000,list(YearFact),sum))
S <- ifelse(s=='Sole Black','Sole',s)
S <- ifelse(s=='Monkfish','Anglerfish',S)
par(mar=c(3,4,2.5,0))
barplot(t,las=3,col=pal[7],ylab='Value (millions )',main=paste(S,'- value of Irish landings'))
par(mar=c(3,4,2.5,0))
barplot(t,las=3,col=pal[7],ylab='Value (millions \u20ac)',main=paste(S,'- value of Irish landings'))
for(s in sort(unique(land$species))) {
t <- with(subset(land,species==s),tapply(LiveWtTonnes*MeanPricePerKgLiveWt/1000,list(YearFact),sum))
S <- ifelse(s=='Sole Black','Sole',s)
S <- ifelse(s=='Monkfish','Anglerfish',S)
png(paste0(sub('/','-',S),'.png'),3,2,'in',8,'white',600)
par(mar=c(3,4,2.5,0))
barplot(t,las=3,col=pal[7],ylab='Value (millions \u20ac)',main=paste(S,'- value of Irish landings'))
dev.off()
cat(s,'\n')
}
runApp('H:/Stockbook/shiny/WIP')
library(RODBC)
library(RColorBrewer)
#setwd('F:\\StockBooks\\_Stockbook2016\\Plots\\ValueTimeSeries')
setwd('H:/Stockbook/shiny/WIP/www/ValueTimeSeries/2015')
pal <- brewer.pal(9, 'Blues')
Q <- "
select datepart(yy,a.DepartureDate) as Year
,case when FAQDesc in ('Tuna Albacore','Tuna Northern Bluefin') then FAQDesc else FSS_SpeciesName end as species
,sum(a.EstKgWeightSUM) / 1000 as LiveWtTonnes
,sum(a.EstKgWeightSUM * b.PricePerKgLiveWt) /sum(a.EstKgWeightSUM) as MeanPricePerKgLiveWt
from declarations a
join stecf.FishPrice_Division b
on a.LogID = b.LogID
and a.LogDeclarationID = b.LogDeclarationID
and a.SpeciesID = b.SpeciesID
join SpeciesLookup c
on a.SpeciesID = c.SpeciesID
join vessels d
on a.VesselID = d.VesselID
where d.VesselProvenance = 'ireland'
and datepart(yy,departuredate) between 2005 and 2014
group by datepart(yy,a.DepartureDate)
,case when FAQDesc in ('Tuna Albacore','Tuna Northern Bluefin') then FAQDesc else FSS_SpeciesName end
order by datepart(yy,a.DepartureDate)
,case when FAQDesc in ('Tuna Albacore','Tuna Northern Bluefin') then FAQDesc else FSS_SpeciesName end
"
Q <- "
select datepart(yy,a.DepartureDate) as Year
,FSS_SpeciesName as species
,sum(a.EstKgWeightSUM) / 1000 as LiveWtTonnes
,sum(a.EstKgWeightSUM * b.PricePerKgLiveWt) /sum(a.EstKgWeightSUM) as MeanPricePerKgLiveWt
from declarations a
join stecf.FishPrice_Division b
on a.LogID = b.LogID
and a.LogDeclarationID = b.LogDeclarationID
and a.SpeciesID = b.SpeciesID
join SpeciesLookup c
on a.SpeciesID = c.SpeciesID
join vessels d
on a.VesselID = d.VesselID
where d.VesselProvenance = 'ireland'
and datepart(yy,departuredate) between 2005 and 2014
group by datepart(yy,a.DepartureDate)
,FSS_SpeciesName
order by datepart(yy,a.DepartureDate)
,FSS_SpeciesName
"
channel <- odbcDriverConnect("Driver=SQL Server; Server=VMFSSDEV02; Database=Logbooks_20170327")
land <- sqlQuery(channel,Q)
close(channel)
table(land$species)
land$YearFact <- factor(land$Year)
land <- subset(land,species!="Mackerel Chub\r\n\t")
for(s in sort(unique(land$species))) {
t <- with(subset(land,species==s),tapply(LiveWtTonnes*MeanPricePerKgLiveWt/1000,list(YearFact),sum))
S <- ifelse(s=='Sole Black','Sole',s)
S <- ifelse(s=='Monkfish','Anglerfish',S)
png(paste0(sub('/','-',S),'.png'),3,2,'in',8,'white',600)
par(mar=c(3,4,2.5,0))
barplot(t,las=3,col=pal[7],ylab='Value (millions \u20ac)',main=paste(S,'- value of Irish landings'))
dev.off()
cat(s,'\n')
}
t
head(land)
dim(land)
table(land$species, land$Year)
t <- with(subset(land,Year==2014),tapply(LiveWtTonnes*MeanPricePerKgLiveWt/1000,list(species),sum))
t
head(land)
Value2014 <- with(subset(land,Year==2014),tapply(LiveWtTonnes*MeanPricePerKgLiveWt/1000,list(species),sum))
Weight2014 <- with(subset(land,Year==2014),tapply(LiveWtTonnes,list(species),sum))
Value2014
Weight2014
Weight2014 <- with(subset(land,Year %in% c(2012, 2013,2014)),tapply(LiveWtTonnes,list(species),average))
Weight2014 <- with(subset(land,Year %in% c(2012, 2013,2014)),tapply(LiveWtTonnes,list(species),mean))
Weight2014
Value2014
